/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Driver } from "@prisma/client";

export class DriverServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.DriverCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.DriverCountArgs>
  ): Promise<number> {
    return this.prisma.driver.count(args);
  }

  async drivers<T extends Prisma.DriverFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DriverFindManyArgs>
  ): Promise<Driver[]> {
    return this.prisma.driver.findMany(args);
  }
  async driver<T extends Prisma.DriverFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DriverFindUniqueArgs>
  ): Promise<Driver | null> {
    return this.prisma.driver.findUnique(args);
  }
  async createDriver<T extends Prisma.DriverCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DriverCreateArgs>
  ): Promise<Driver> {
    return this.prisma.driver.create<T>(args);
  }
  async updateDriver<T extends Prisma.DriverUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DriverUpdateArgs>
  ): Promise<Driver> {
    return this.prisma.driver.update<T>(args);
  }
  async deleteDriver<T extends Prisma.DriverDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DriverDeleteArgs>
  ): Promise<Driver> {
    return this.prisma.driver.delete(args);
  }
}
